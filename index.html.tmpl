<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>papert: logo in your browser</title>
<link rel="icon" href="/favicon.ico" />
<link rel="stylesheet" type="text/css" href="/static/papert.css" />
<script type="text/javascript" src="/static/turtle.js"></script>
<script type="text/javascript" src="/static/parser.js"></script>
<script type="text/javascript" src="/static/logo.js"></script>
<script type="text/javascript">
var turtle = null;
var logo = null;
var canvas;
var form;
var sprite;
var textOutput;

function init (canvas_id,turtle_id,form_id,oldcode_id,textoutput_id) {
    canvas = document.getElementById(canvas_id);
    form = document.getElementById(form_id);
    textOutput = document.getElementById(textoutput_id);
    sprite = document.getElementById(turtle_id);

    // I hate opera, I hate firefox.
    canvas.style.width = 500;
    canvas.width = 500;
    
    canvas.style.height = 500;
    canvas.height = 500;
    
    oldcode = document.getElementById(oldcode_id);
    setup();
}

function setup () {
    logo = new Logo()
    
    fast = 5;
    turtle = new DelayTurtle(canvas,sprite,fast,false);
    logo.setTurtle(turtle);
	logo.setTextOutput(textOutput);
}


function run (speed,drawbits) {
        turtle.stop();
        if (speed != fast) {
            fast = speed;
            var newturtle = null;
/*          newturtle = new Turtle(canvas);
*/
            newturtle = new DelayTurtle(canvas,sprite,fast,drawbits);
            logo.setTurtle(newturtle);
            turtle = newturtle;
        }
        var code = form.code.value;

        oldcode.innerHTML +="\n"+code
        //form.code.value = ""

        
        var out = logo.run(code);
                
        if (out && out.type == "error") {
            alert(out.data);
            setup();
        }
}

function stop(){
    turtle.stop();
}

function clearcanvas() {
    var ctx = canvas.getContext('2d');
    ctx.fillStyle = "rgb(255,255,255)";
    ctx.fillRect(0, 0, 500, 500);
	textOutput.innerHTML = "";
}
</script>

</head>
<body onload="init('canvas','turtle','input','oldcode', 'textOutput'); clearcanvas(); run(5,false);">
    
<div id="main">
<form id="input" action="/" method="post" onSubmit="this.img.value = canvas.toDataURL().replace('data:image/png;base64,','')">
<div id="top"><div class="inner"><h1>papert&#8213;logo in your browser</h1>
<h2>
examples:
<a href="/_REo_2F2">koch snowflake</a>,
<a href="/dZ1f62XY">hilbert curve</a>, 
<a href="/8kpcBaQu">spiral</a>
</h2>
{% if hash %}
<h4>share this program: <a href="http://logo.twentygototen.org/{{hash|escape}}">link to it</a><br />
html: <input readonly="readonly" id="htmlsnippet" value="&lt;a href=&quot;http://logo.twentygototen.org/{{hash|escape}}&quot;&gt;&lt;img src=&quot;http://logo.twentygototen.org/{{hash}}.png&quot;/&gt;&lt;br/&gt;Run at logo.twentygototen.org&lt;/a&gt;" /><br />
bbcode: <input readonly="readonly" id="bbcode" value="[url=http://logo.twentygototen.org/{{hash}}][img]http://logo.twentygototen.org/{{hash}}.png[/img]Run at logo.twentygototen.org[/url]" />
</h4>
{% endif %}
</div></div>

<div id="content">
    <div class="inner">
        <div id="oldcode">&nbsp;</div>
        <div>
        <textarea name="code" id="code" rows="80" cols="20">{{code|escape}}</textarea>
        </div>
        <div style="margin: 5px;">
        <input type="button" onClick="run(25,true);" value="run slowly" />
        <input type="button" onClick="run(5,false);" value="run normally" style="font-weight: bold;"/>
        <input type="button" onClick="run(1,false);" value="run fast" />
        <input type="button" onClick="stop();" value="stop program" />
        <input type="hidden" name="img" />
        </div>

    </div>
</div>

<div id="left">
    <div class="inner">
		<div id="textOutput"></div>
        <div id="turtle">
        <embed width="20" height="20" id='sprite' src="/static/turtle.svg"/>
        </div>
        <canvas id="canvas">
    Your browser doesn't support canvas tags. Please upgrade to a recent version of Firefox or Opera.
    </canvas>
    <span style="float: left; margin-right: auto;">
    <input type="submit" value="share this program" />
    <input type="button" onClick="document.location.href = canvas.toDataURL().replace('image/png', 'image/octet-stream')" value="save as png" />
    </span>
     <span style="float: right;margin-left: auto; margin-right: 20px;">
     <input type="button" onClick="clearcanvas();" value="clear" />
     </span>
</div>
        
</div>
</form>

<div id="footer">
<span style="float: left; margin-left: 20px; margin-right: auto; color: white;">
Recent Programs
</span>
<span style="float: right;margin-left: auto; margin-right: 20px; color: white;">
this is free software, and 
<a href="http://code.google.com/p/papert">papert is hosted on google code</a>
</span>
&nbsp;
</div>
<div id="recent">
<a name="recent"></a>
<ul>
{% if next_date %}
<li><a href="?newer={{next_date|escape}}#recent">&lt;</li>
{% endif %}
{% for item in recent %}
<li><a href="/{{item|escape}}"><img src="/{{item|escape}}.png" height="125" width="125" alt="" /></a></li>
{% endfor %}
{% if last_date %}
<li><a href="?older={{last_date|escape}}#recent">&gt;</a></li>
{% endif %}
</ul>
</div>
<div id="notes">
<pre>
Quick reference logo guide:

Stuff should work in lower or upper case.

Types:

WORDS:          FW BW ....
NUMBERS:        0, 0.1, 20
LISTS:          [1 2 3 5]
SYMBOLS:        "foo "bar
VARIABLES:      :foo :bar 
FUNCTION CALLS: COMMAND arg arg arg ...
                (COMMAND arg arg arg ...)

Supported Commands:

RESET           Clear the screen, move home.


Turtle Movement:

FORWARD n       Move the turtle forward n pixels
FW n    

BACKWARD n      Move the turtle backward n pixels

RIGHT n         Move the turtle left or right n degrees
RT n
LEFT n
LT n

SETX x          Set the co-ordinates of the turtle
SETY y
SETXY x y

HOME            Move the turtle to the home position


Drawing:

CLEARSCREEN     Clear the screen
CLEAR
CS

CIRCLE r        Draw a Circle of radius r around the turtle

ARC r d         Draw an arc of radius r for d degrees

PENUP           Lift the pen up and down
PU
PENDOWN
PD

COLOR [r g b]   Set the pen color

PENWIDTH w      Set the pen width


Text:

PRINT "foo          Prints "foo"
PR "foo
PRINT ["foo "bar]   Prints "foo bar"
PR ["foo "bar]

CLEARTEXT           Clears previously printed text
CT


Arithmetic:

1 + 2                   1 * 2
SUM 1 2                 PRODUCT 1 2
(SUM 1 2 3 ...)         (PRODUCT 1 2 3 ...)

1 - 2                   1 / 2
DIFFERENCE 1 2          DIVIDE 1 2

1 % 2
MOD 1 2

RANDOM n        Return a integer in [0,n)
RAND n

RERANDOM s      Set the random seed value
SRAND s


INT n
ROUND n
POWER e m
EXP n
LN n
LOG10 n



SIN, COS
RADSIN,RADCOS

ARCTAN
RADARCTAN



List Operators (experimental):
These functions may break silently at the moment.

FIRST, HEAD             Return the first item in a list
BUTFIRST, TAIL          Return the everything but the first item in a list
LAST                    Return the last item in a list
BUTLAST                 Return everything but the last item in a list

FPUT item list  Return a new list with item at the front
LPUT item list  Return a new list with item at the back

ITEM index list                 Retrieve the indexed item
SETITEM index list value        Set the indexed item

EMPTY? list     Return true if list is empty
EMPTYP list 

Logical and Comparison:

1 = 1
EQUAL? 1 1
EQUALP 1 1

1 &lt; 2                1 &lt;= 2
LESS? 1 2               LESSEQUAL? 1 2
LESSP 1 2               LESSEQUALP 1 2

2 &gt; 1                2 &gt; 1
GREATER? 2 1            GREATEREQUAL? 2 1
GREATERP 2 1            GREATEREQUALP 2 1

AND TRUE FALSE          OR FALSE TRUE

Conditionals:

IF COND [IF_TRUE] 
IF 2 &gt; 1 [FW 100]

IFELSE COND [IF_TRUE] [IF_FALSE]
IFELSE 2 &gt; 1 [FW 100 RT 90] [BW 100 LT 90]


Setting and getting:

Set x to 1:             make "x 1
Adding :n to :x         :n + :x
Setting :x to :n + :x   make "x :x + :n

Looping:

REPEAT n [COMMANDS ...]

STOP    - Stop the current Repeat or function.

OUTPUT f  - Return f.
OP f


Defining and Calling:

TO FOO :ARG1 :ARG2 BODY END

TO SQUARE :length 
REPEAT 4 [FW :length RT 90]
END

SQUARE :10

TO POLYGON :length :sides
REPEAT :sides [FW :length RT 360/:sides]
END

POLYGON 5 10

Note: Simple Tail recursion is supported.
</pre>
</div>

</div>
</body>
</html>
